// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using AddressBook.DbContexts;

namespace AddressBook.Migrations
{
    [DbContext(typeof(AddressBookContext))]
    [Migration("20230101171438_asset5")]
    partial class asset5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("addressbook.Entities.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Country")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Line1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Zipcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = new Guid("859a0577-76ad-49ef-a111-346e4f978a88"),
                            City = "dindigul",
                            Country = new Guid("1f1f245d-c63b-42f6-b592-49b5b16bf861"),
                            Line1 = "psna college",
                            Line2 = "psna nagar",
                            StateName = "tamilnadu",
                            TypeId = new Guid("abad70c5-11db-42f8-9e3a-487023f1b1cc"),
                            UserId = new Guid("f46f9dba-8a1c-4dd9-a8ea-c572a83be0be"),
                            Zipcode = "625422"
                        },
                        new
                        {
                            AddressId = new Guid("8c50f920-4b3a-4565-a8b6-0b635b429a98"),
                            City = "virudhunagar",
                            Country = new Guid("1f1f245d-c63b-42f6-b592-49b5b16bf861"),
                            Line1 = "anna nagar",
                            Line2 = "aruppukottai",
                            StateName = "tamilnadu",
                            TypeId = new Guid("abad70c5-11db-42f8-9e3a-487023f1b1cc"),
                            UserId = new Guid("68417748-6864-4866-8d9b-b82ae29da396"),
                            Zipcode = "626101"
                        });
                });

            modelBuilder.Entity("addressbook.Entities.AssetDto", b =>
                {
                    b.Property<Guid>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssetId");

                    b.HasIndex("UserId");

                    b.ToTable("AssetDtos");
                });

            modelBuilder.Entity("addressbook.Entities.Email", b =>
                {
                    b.Property<Guid>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmailId");

                    b.HasIndex("UserId");

                    b.ToTable("Emails");

                    b.HasData(
                        new
                        {
                            EmailId = new Guid("d019119e-245b-45d2-93df-b4cbbdfeac9f"),
                            EmailAddress = "admin@ajay.live",
                            TypeId = new Guid("abad70c5-11db-42f8-9e3a-487023f1b1cc"),
                            UserId = new Guid("f46f9dba-8a1c-4dd9-a8ea-c572a83be0be")
                        },
                        new
                        {
                            EmailId = new Guid("8c50f920-4b3a-4565-a8b6-0b635b429a98"),
                            EmailAddress = "support@ajay.live",
                            TypeId = new Guid("abad70c5-11db-42f8-9e3a-487023f1b1cc"),
                            UserId = new Guid("68417748-6864-4866-8d9b-b82ae29da396")
                        });
                });

            modelBuilder.Entity("addressbook.Entities.ImageFile", b =>
                {
                    b.Property<Guid>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FileId");

                    b.ToTable("ImageFile");
                });

            modelBuilder.Entity("addressbook.Entities.PhoneNumber", b =>
                {
                    b.Property<Guid>("PhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhoneId");

                    b.HasIndex("UserId");

                    b.ToTable("Phones");

                    b.HasData(
                        new
                        {
                            PhoneId = new Guid("00793011-a986-49f0-879b-86023edaff46"),
                            Phone_number = "7397142913",
                            TypeId = new Guid("abad70c5-11db-42f8-9e3a-487023f1b1cc"),
                            UserId = new Guid("f46f9dba-8a1c-4dd9-a8ea-c572a83be0be")
                        },
                        new
                        {
                            PhoneId = new Guid("8c50f920-4b3a-4565-a8b6-0b635b429a98"),
                            Phone_number = "8189900410",
                            TypeId = new Guid("abad70c5-11db-42f8-9e3a-487023f1b1cc"),
                            UserId = new Guid("68417748-6864-4866-8d9b-b82ae29da396")
                        });
                });

            modelBuilder.Entity("addressbook.Entities.RefSet", b =>
                {
                    b.Property<Guid>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("RefSets");

                    b.HasData(
                        new
                        {
                            TypeId = new Guid("abad70c5-11db-42f8-9e3a-487023f1b1cc"),
                            Description = "It is used to the detail mentioned all about personal",
                            Name = "PERSONAL"
                        },
                        new
                        {
                            TypeId = new Guid("0d80e411-064c-4025-abd3-b10373c5b0c7"),
                            Description = "The detail mentioned is all about Work based",
                            Name = "WORK"
                        },
                        new
                        {
                            TypeId = new Guid("1f1f245d-c63b-42f6-b592-49b5b16bf861"),
                            Description = "Country",
                            Name = "INDIA"
                        },
                        new
                        {
                            TypeId = new Guid("e7c0cab2-367b-4b60-805f-8b20cdadc599"),
                            Description = "Country",
                            Name = "UNITED_STATES"
                        },
                        new
                        {
                            TypeId = new Guid("7b135772-658f-4bdf-a01c-cedba350cb41"),
                            Description = "Alternate number",
                            Name = "ALTERNATE"
                        });
                });

            modelBuilder.Entity("addressbook.Entities.RefTerm", b =>
                {
                    b.Property<Guid>("RefTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Types")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefTermId");

                    b.ToTable("RefTerm");

                    b.HasData(
                        new
                        {
                            RefTermId = new Guid("3bbd0a04-40d0-44fb-ba4d-c25d0926d7df"),
                            Description = "Types of addresses",
                            Types = "ADDRESS_TYPE"
                        },
                        new
                        {
                            RefTermId = new Guid("a447a151-130e-46df-917b-d09976d2ebb5"),
                            Description = "Types of phonenumber",
                            Types = "PHONE_NUMBER_TYPE"
                        },
                        new
                        {
                            RefTermId = new Guid("66ce5b88-684d-4a82-96b6-d9c8bb751687"),
                            Description = "Types of emails",
                            Types = "EMAIL_ADDRESS_TYPE"
                        },
                        new
                        {
                            RefTermId = new Guid("a673bec7-aae1-4cca-b459-fb5d5bbfe3e1"),
                            Description = "Types of countries",
                            Types = "COUNTRY"
                        });
                });

            modelBuilder.Entity("addressbook.Entities.SetRefTerm", b =>
                {
                    b.Property<Guid>("SetRefTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefTermId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SetRefTermId");

                    b.ToTable("SetRefTerms");

                    b.HasData(
                        new
                        {
                            SetRefTermId = new Guid("d2ffc955-b24b-411a-8cdb-26516bcfe3db"),
                            RefSetId = new Guid("abad70c5-11db-42f8-9e3a-487023f1b1cc"),
                            RefTermId = new Guid("3bbd0a04-40d0-44fb-ba4d-c25d0926d7df")
                        },
                        new
                        {
                            SetRefTermId = new Guid("7e9c9d23-7728-4808-975d-d07b42d8e039"),
                            RefSetId = new Guid("0d80e411-064c-4025-abd3-b10373c5b0c7"),
                            RefTermId = new Guid("3bbd0a04-40d0-44fb-ba4d-c25d0926d7df")
                        },
                        new
                        {
                            SetRefTermId = new Guid("0bd3c11f-c1c5-48f5-8ece-86cfeb5ede88"),
                            RefSetId = new Guid("abad70c5-11db-42f8-9e3a-487023f1b1cc"),
                            RefTermId = new Guid("a447a151-130e-46df-917b-d09976d2ebb5")
                        },
                        new
                        {
                            SetRefTermId = new Guid("a1c2cd8c-aae4-463d-b873-841c40f4bf86"),
                            RefSetId = new Guid("0d80e411-064c-4025-abd3-b10373c5b0c7"),
                            RefTermId = new Guid("a447a151-130e-46df-917b-d09976d2ebb5")
                        },
                        new
                        {
                            SetRefTermId = new Guid("a0229113-f803-4403-ba10-b0698d0cbbbe"),
                            RefSetId = new Guid("7b135772-658f-4bdf-a01c-cedba350cb41"),
                            RefTermId = new Guid("a447a151-130e-46df-917b-d09976d2ebb5")
                        },
                        new
                        {
                            SetRefTermId = new Guid("2aa77699-21f7-442a-8b0d-b6e3f6b9211d"),
                            RefSetId = new Guid("abad70c5-11db-42f8-9e3a-487023f1b1cc"),
                            RefTermId = new Guid("66ce5b88-684d-4a82-96b6-d9c8bb751687")
                        },
                        new
                        {
                            SetRefTermId = new Guid("173487fc-5809-4d64-8a2c-a23403127e30"),
                            RefSetId = new Guid("0d80e411-064c-4025-abd3-b10373c5b0c7"),
                            RefTermId = new Guid("66ce5b88-684d-4a82-96b6-d9c8bb751687")
                        },
                        new
                        {
                            SetRefTermId = new Guid("5d14d241-437e-4819-ab01-58563d95c73c"),
                            RefSetId = new Guid("1f1f245d-c63b-42f6-b592-49b5b16bf861"),
                            RefTermId = new Guid("a673bec7-aae1-4cca-b459-fb5d5bbfe3e1")
                        },
                        new
                        {
                            SetRefTermId = new Guid("d1f520f4-976d-4ec7-a523-24985873a91b"),
                            RefSetId = new Guid("e7c0cab2-367b-4b60-805f-8b20cdadc599"),
                            RefTermId = new Guid("a673bec7-aae1-4cca-b459-fb5d5bbfe3e1")
                        });
                });

            modelBuilder.Entity("addressbook.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("First_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f46f9dba-8a1c-4dd9-a8ea-c572a83be0be"),
                            First_name = "Ajay",
                            Last_name = "Kumar",
                            Password = "12345werWER@",
                            User_name = "Ajay Kumar"
                        },
                        new
                        {
                            UserId = new Guid("68417748-6864-4866-8d9b-b82ae29da396"),
                            First_name = "Ram",
                            Last_name = "Kumar",
                            Password = "12345werWER@",
                            User_name = "Ram Kumar"
                        });
                });

            modelBuilder.Entity("addressbook.Entities.Address", b =>
                {
                    b.HasOne("addressbook.Entities.User", null)
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("addressbook.Entities.AssetDto", b =>
                {
                    b.HasOne("addressbook.Entities.User", null)
                        .WithMany("AssetDto")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("addressbook.Entities.Email", b =>
                {
                    b.HasOne("addressbook.Entities.User", null)
                        .WithMany("Emails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("addressbook.Entities.PhoneNumber", b =>
                {
                    b.HasOne("addressbook.Entities.User", null)
                        .WithMany("Phones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
